From 562ecc074da7d8b43f597c0d3686ab91c80d2ea2 Mon Sep 17 00:00:00 2001
From: Nick Stephens <nick.d.stephens@gmail.com>
Date: Sun, 30 Aug 2015 18:18:04 -0700
Subject: [PATCH] Make tracer modifications

---
 cpu-exec.c           | 13 +++++++++++--
 linux-user/elfload.c |  4 ++++
 tracer-config        |  3 +++
 3 files changed, 18 insertions(+), 2 deletions(-)
 create mode 100755 tracer-config

diff --git a/cpu-exec.c b/cpu-exec.c
index 2ffeb6e..3a9cd24 100644
--- a/cpu-exec.c
+++ b/cpu-exec.c
@@ -29,6 +29,8 @@
 #include "qemu/rcu.h"
 
 /* -icount align implementation. */
+uint64_t tracer_code_start,
+        tracer_code_end;
 
 typedef struct SyncClocks {
     int64_t diff_clk;
@@ -493,16 +495,23 @@ int cpu_exec(CPUArchState *env)
                     tcg_ctx.tb_ctx.tb_invalidated_flag = 0;
                 }
                 if (qemu_loglevel_mask(CPU_LOG_EXEC)) {
-                    qemu_log("Trace %p [" TARGET_FMT_lx "] %s\n",
-                             tb->tc_ptr, tb->pc, lookup_symbol(tb->pc));
+                    /* tracer only cares about transitions in .text */
+                    if (tb->pc >= tracer_code_start && tb->pc <= tracer_code_end)
+                        qemu_log("Trace %p [" TARGET_FMT_lx "] %s\n",
+                                 tb->tc_ptr, tb->pc, lookup_symbol(tb->pc));
                 }
                 /* see if we can patch the calling TB. When the TB
                    spans two pages, we cannot safely do a direct
                    jump. */
+
+                /* tracer needs to see every basic block transition */
+                /*
                 if (next_tb != 0 && tb->page_addr[1] == -1) {
                     tb_add_jump((TranslationBlock *)(next_tb & ~TB_EXIT_MASK),
                                 next_tb & TB_EXIT_MASK, tb);
                 }
+                */
+
                 have_tb_lock = false;
                 spin_unlock(&tcg_ctx.tb_ctx.tb_lock);
 
diff --git a/linux-user/elfload.c b/linux-user/elfload.c
index 399c021..3acc44e 100644
--- a/linux-user/elfload.c
+++ b/linux-user/elfload.c
@@ -28,6 +28,8 @@
 
 #define ELF_OSABI   ELFOSABI_SYSV
 
+extern uint64_t tracer_code_start, tracer_code_end;
+
 /* from personality.h */
 
 /*
@@ -1922,9 +1924,11 @@ static void load_elf_image(const char *image_name, int image_fd,
             if (elf_prot & PROT_EXEC) {
                 if (vaddr < info->start_code) {
                     info->start_code = vaddr;
+                    if (!tracer_code_start) tracer_code_start = vaddr;
                 }
                 if (vaddr_ef > info->end_code) {
                     info->end_code = vaddr_ef;
+                    if (!tracer_code_end) tracer_code_end = vaddr_ef;
                 }
             }
             if (elf_prot & PROT_WRITE) {
diff --git a/tracer-config b/tracer-config
new file mode 100755
index 0000000..0243369
--- /dev/null
+++ b/tracer-config
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+./configure --target-list=i386-linux-user,x86_64-linux-user
-- 
1.9.1

